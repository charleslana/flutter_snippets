{
    "appSettings": "Settings",
    "appSettingsTheme": "Theme",
    "appSettingsDefaultThemeSystem": "System defined default theme",
    "appSettingsDarkMode": "Dark mode",
    "appSettingsLanguage": "Language",
    "appSettingsDefaultLanguageSystem": "System defined default language",
    "appSettingsLanguagePortuguese": "Portuguese",
    "appSettingsLanguageEnglish": "English",
    "appSettingsLanguageSpanish": "Spanish",
    "appInfoTitle": "Info",
    "appInfoLaunchError": "Could not launch",
    "appInfoFollowMe": "Follow me",
    "appInfoAbout": "About",
    "appInfoAboutDescription": "is a tool that helps with code snippets from the Flutter framework",
    "appNewsTitle": "News",
    "appNewsError": "Something went wrong try later",
    "appNewsNoNews": "No news",
    "appNewsDateFormat": "MM/dd/yyyy",
    "appNewsShowMore": "Show more",
    "appNewsShowLess": "Show less",
    "tabBarTitleExample": "Example",
    "tabBarTitleCode": "Code",
    "utilCopyCodeMessage": "Code copied",
    "utilToastClose": "Close",
    "utilAlertNoInformation": "No information available",
    "filterSearchLabel": "Search {filter}",
    "@filterSearchLabel": {
        "type": "text",
        "placeholders": {
            "filter": {}
        }
    },
    "filterSearchHint": "{filter}",
    "@filterSearchHint": {
        "type": "text",
        "placeholders": {
            "filter": {}
        }
    },
    "filterSearchNoResults": "No results",
    "filterBadgeNew": "New",
    "filterBadgeUpdated": "Updated",
    "menuDartBasicDart": "Dart Basic",
    "menuDartBasicComments": "Comments",
    "menuDartBasicVariables": "Variables",
    "menuDartBasicNomenclatures": "Nomenclatures",
    "menuDartBasicTypes": "Types",
    "menuDartBasicMathOperations": "Math Operations",
    "menuDartBasicConcatenationStrings": "String Concatenation",
    "menuDartBasicNullSafety": "Null Safety",
    "menuDartBasicFluxControl": "Flux Control",
    "menuDartBasicFunctionsParameters": "Functions and Parameters",
    "menuDartAdvancedDart": "Dart Advanced",
    "menuDartAdvancedFilterClass": "Class",
    "menuDartAdvancedFilterPrivatePublic": "Private or Public",
    "menuDartAdvancedFilterGetterSetter": "Getter e Setter",
    "menuDartAdvancedFilterConstructor": "Constructor",
    "menuDartAdvancedFilterExtends": "Extends",
    "menuDartAdvancedFilterAbstract": "Abstract",
    "menuDartAdvancedFilterImplements": "Implements",
    "menuDartAdvancedFilterPolymorphism": "Polymorphism",
    "menuDartAdvancedList": "List",
    "menuDartAdvancedMap": "Map",
    "menuDartAdvancedOperatorSpread": "Operator Spread",
    "menuDartAdvancedCascadeOperator": "Cascade Operator",
    "menuDartAdvancedPubSpec": "PubSpec",
    "menuDartAdvancedTypedef": "Typedef",
    "menuDartAdvancedSplit": "Split",
    "menuDartAdvancedJoin": "Join",
    "menuDartAdvancedConvert": "Convert",
    "menuWidgetCreate": "Creation Widgets",
    "menuWidgetCreateStateless": "Widget Stateless",
    "menuWidgetCreateStateful": "Widget Stateful",
    "menuWidgetBasic": "Widgets Basic",
    "menuWidgetAdvanced": "Widgets Advanced",
    "menuWidgetApps": "Apps",
    "menuWidgetBasicSafeArea": "SafeArea",
    "menuWidgetBasicCircularProgressIndicator": "CircularProgressIndicator",
    "menuWidgetBasicContainer": "Container",
    "menuWidgetBasicText": "Text",
    "menuWidgetBasicTextOverflow": "Text with Overflow",
    "menuWidgetBasicTextStyle": "Text with style",
    "menuWidgetBasicTextDefaultStyle": "Default styled text",
    "menuWidgetBasicRichText": "RichText",
    "menuWidgetBasicColumn": "Column",
    "menuWidgetBasicRow": "Row",
    "menuWidgetBasicDivider": "Divider",
    "menuWidgetBasicVerticalDivider": "Divider Vertical",
    "menuWidgetBasicTextButton": "TextButton",
    "menuWidgetBasicElevatedButton": "ElevatedButton",
    "menuWidgetBasicElevatedButtonIcon": "ElevatedButton with Icon",
    "menuWidgetBasicOutlinedButton": "OutlinedButton",
    "menuWidgetBasicIcon": "Icon",
    "menuWidgetBasicIconBackground": "Icon with background",
    "menuWidgetBasicImage": "Image",
    "menuWidgetBasicBottomSheet": "BottomSheet",
    "menuWidgetBasicMediaQuery": "MediaQuery",
    "menuWidgetBasicGestureDetector": "GestureDetector",
    "menuWidgetBasicInkWell": "InkWell",
    "menuWidgetBasicCard": "Card",
    "menuWidgetBasicFutureBuilder": "FutureBuilder",
    "menuWidgetBasicStack": "Stack",
    "menuWidgetBasicPageView": "PageView",
    "menuWidgetBasicTable": "Table",
    "menuWidgetBasicSnackBar": "SnackBar",
    "menuWidgetBasicDialog": "Dialog",
    "menuWidgetBasicListView": "ListView",
    "menuWidgetBasicRotatedBox": "RotatedBox",
    "menuWidgetBasicClipRect": "ClipRect",
    "menuWidgetBasicClipRRect": "ClipRRect",
    "menuWidgetBasicClipOval": "ClipOval",
    "menuWidgetBasicFlexible": "Flexible",
    "menuWidgetBasicExpanded": "Expanded",
    "menuWidgetBasicCircleAvatar": "CircleAvatar",
    "menuWidgetBasicFittedBox": "FittedBox",
    "menuWidgetBasicVisibility": "Visibility",
    "menuWidgetBasicBoxDecoration": "BoxDecoration",
    "menuWidgetBasicSelectableText": "SelectableText",
    "menuWidgetBasicInteractiveViewer": "InteractiveViewer",
    "menuWidgetBasicAspectRatio": "AspectRatio",
    "menuWidgetBasicPlaceholder": "Placeholder",
    "menuWidgetBasicSpacer": "Spacer",
    "menuWidgetBasicListWheelScrollView": "ListWheelScrollView",
    "menuWidgetBasicOpacity": "Opacity",
    "menuWidgetBasicConstrainedBox": "ConstrainedBox",
    "menuWidgetBasicAlign": "Align",
    "menuWidgetBasicPadding": "Padding",
    "menuWidgetBasicAbsorbPointer": "AbsorbPointer",
    "menuWidgetBasicIgnorePointer": "IgnorePointer",
    "menuWidgetBasicTooltip": "Tooltip",
    "menuWidgetBasicColors": "Colors",
    "menuWidgetBasicFlutterLogo": "FlutterLogo",
    "menuWidgetBasicSizedBox": "SizedBox",
    "menuWidgetBasicFloatingActionButton": "FloatingActionButton",
    "menuWidgetBasicCheckbox": "Checkbox",
    "menuWidgetBasicEndDrawer": "EndDrawer",
    "menuWidgetBasicContainerTransform": "ContainerTransform",
    "menuWidgetBasicTransform": "Transform",
    "menuWidgetBasicBanner": "Banner",
    "menuWidgetBasicBorderRadius": "BorderRadius",
    "menuWidgetBasicSingleChildScrollView": "SingleChildScrollView",
    "menuWidgetBasicBoxShadow": "BoxShadow",
    "menuWidgetBasicShaderMask": "ShaderMask",
    "menuWidgetBasicColorFiltered": "ColorFiltered",
    "menuWidgetBasicDataTable": "DataTable",
    "menuWidgetBasicImageFiltered": "ImageFiltered",
    "menuWidgetBasicPositioned": "Positioned",
    "menuWidgetBasicLinearProgressIndicator": "LinearProgressIndicator",
    "menuWidgetBasicRawString": "RawString",
    "menuWidgetBasicLimitedBox": "LimitedBox",
    "menuWidgetBasicCheckboxListTile": "CheckboxListTile",
    "menuWidgetBasicSwitchListTile": "SwitchListTile",
    "menuWidgetBasicExpansionPanelList": "ExpansionPanelList",
    "menuWidgetBasicFractionallySizedBox": "FractionallySizedBox",
    "menuWidgetBasicScrollbar": "Scrollbar",
    "menuWidgetBasicOverflowBox": "OverflowBox",
    "menuWidgetBasicRadioListTile": "RadioListTile",
    "menuWidgetBasicTextField": "TextField",
    "menuWidgetBasicHapticFeedback": "HapticFeedback",
    "menuWidgetBasicDataTableWithSort": "DataTable with sort",
    "menuWidgetBasicExpansionTile": "ExpansionTile",
    "menuWidgetBasicLinearGradient": "LinearGradient",
    "menuWidgetBasicBaseline": "Baseline",
    "menuWidgetBasicActionChip": "ActionChip",
    "menuWidgetBasicBackdropFilter": "BackdropFilter",
    "menuWidgetBasicExpandIcon": "ExpandIcon",
    "menuWidgetBasicShapeDecoration": "ShapeDecoration",
    "menuWidgetBasicImageIcon": "ImageIcon",
    "menuWidgetBasicChoiceChip": "ChoiceChip",
    "menuWidgetBasicDecorationImage": "DecorationImage",
    "menuWidgetAdvancedRefreshIndicator": "RefreshIndicator",
    "menuWidgetAdvancedDraggable": "Drag and Drop",
    "menuWidgetAdvancedGlobalKey": "GlobalKey",
    "menuWidgetAdvancedDrawer": "Drawer",
    "menuWidgetAdvancedDropdown": "Dropdown",
    "menuWidgetAdvancedDismissible": "Dismissible",
    "menuWidgetAdvancedGridView": "GridView",
    "menuWidgetAdvancedSliverAppBar": "SliverAppBar",
    "menuWidgetAdvancedSliverGrid": "SliverGrid",
    "menuWidgetAdvancedNavigator": "Navigator",
    "menuWidgetAdvancedNavigatorWithArguments": "Navigator with Arguments",
    "menuWidgetAdvancedSendDataToScreen": "Send Data to Screen",
    "menuWidgetAdvancedPopupMenuButton": "PopupMenuButton",
    "menuWidgetAdvancedTabs": "Tabs",
    "menuWidgetAdvancedClipPath": "ClipPath",
    "menuWidgetAdvancedSlider": "Slider",
    "menuWidgetAdvancedListViewWithSearch": "ListViewWithSearch",
    "menuWidgetAdvancedChip": "Chip",
    "menuWidgetAdvancedImageLoadingBuilder": "ImageLoadingBuilder",
    "menuWidgetAdvancedMouseRegion": "MouseRegion",
    "menuWidgetAdvancedLayoutBuilder": "LayoutBuilder",
    "menuWidgetAdvancedBottomNavigationBar": "BottomNavigationBar",
    "menuWidgetAdvancedExpansionPanel": "ExpansionPanel",
    "menuWidgetAdvancedPaint": "Paint",
    "menuWidgetAdvancedLoadJson": "LoadJson",
    "menuWidgetAdvancedClipboard": "Clipboard",
    "menuWidgetAdvancedPageRouteBuilder": "PageRouteBuilder",
    "menuWidgetAdvancedLoadTxt": "LoadTxt",
    "menuWidgetAdvancedIndexedStack": "IndexedStack",
    "menuWidgetAdvancedScrollController": "ScrollController",
    "menuWidgetAdvancedPageTransition": "PageTransition",
    "menuWidgetAdvancedSplashScreen": "SplashScreen",
    "menuWidgetAdvancedPushNamed": "PushNamed",
    "menuWidgetAdvancedOnGenerateRoute": "OnGenerateRoute",
    "menuWidgetAdvancedWillPopScope": "WillPopScope",
    "menuWidgetAdvancedStepper": "Stepper",
    "menuWidgetAdvancedToggleButtons": "ToggleButtons",
    "menuWidgetAdvancedDatePicker": "DatePicker",
    "menuWidgetAdvancedScrollToBottomOrTop": "ScrollToBottomOrTop",
    "menuWidgetAdvancedAutocomplete": "Autocomplete",
    "menuWidgetAdvancedHideKeyboard": "Hide keyboard",
    "menuWidgetAppStopwatch": "Stopwatch",
    "menuWidgetAppCountdown": "Countdown",
    "menuAnimation": "Animations",
    "menuAnimationAnimationIcon": "Animation Icon",
    "menuAnimationAnimatedContainer": "AnimatedContainer",
    "menuAnimationAnimatedCrossFade": "AnimatedCrossFade",
    "menuAnimationAnimatedOpacity": "AnimatedOpacity",
    "menuAnimationAnimatedDefaultTextStyle": "AnimatedDefaultTextStyle",
    "menuAnimationCustomPaint": "CustomPaint",
    "menuAnimationRotatingCircle": "RotatingCircle",
    "menuAnimationMatrix": "Matrix",
    "menuAnimationDraggableScrollableSheet": "DraggableScrollableSheet",
    "menuAnimationAnimatedImage": "AnimatedImage",
    "menuAnimationHero": "Hero",
    "menuAnimationFadeInImage": "FadeInImage",
    "menuAnimationFadeTransition": "FadeTransition",
    "menuAnimationAnimatedSwitcher": "AnimatedSwitcher",
    "menuAnimationAnimatedList": "AnimatedList",
    "menuAnimationSlideTransition": "SlideTransition",
    "menuMain": "Main",
    "menuMainDeviceOrientation": "DeviceOrientation",
    "menuMainSystemUIOverlayStyle": "SystemUIOverlayStyle",
    "tipRotatedBox": "The RotatedBox widget is used to rotate its child by a integral number of quarter turns. It is used to orient it’s child widgets into either horizontal or vertical orientation. Furthermore, it is very lightweight and can be used for designing various UI as it gives flexibility to the user over the Design of the app.",
    "tipSafeArea": "SafeArea is an important and useful widget in Flutter which makes UI dynamic and adaptive to a wide variety of devices. While designing the layout of widgets, we consider different types of devices and their pre-occupied constraints of screen like status bar, notches, navigation bar, etc. But new devices are being launched with different designs and in certain scenarios, your app might overlay any of those pre-occupied constraints. So, in order to make our UI adaptive and error-free, we use SafeArea widget. In simple words, SafeArea is basically a padding widget, which adds any necessary padding to your app, based on the device it is running on. If your app’s widgets are overlaying any of the system’s features like notches, status bar, camera holes, or any other such features, then SafeArea would add padding around the app, as required. Internally SafeArea uses MediaQuery to check the dimensions of the display screen and includes extra padding if needed.",
    "tipContainer": "Container class in flutter is a convenience widget that combines common painting, positioning, and sizing of widgets. A Container class can be used to store one or more widgets and position it on the screen according to our convenience. Basically a container is like a box to store contents. A basic container element that stores a widget has a margin, which separates the present container with other contents. The total container can be given a border of different shapes, for example, rounded rectangles, etc. A container surrounds its child with padding and then applies additional constraints to the padded extent (incorporating the width and height as constraints, if either is non-null).",
    "tipText": "The Text widget displays a string of text with single style. The string might break across multiple lines or might all be displayed on the same line depending on the layout constraints.",
    "tipRichText": "The RichText widget is used to display text that uses various different styles. The displayed text is described using a tree of TextSpan objects, each of which has its own associated style that is used for that subtree. Depending on the layout constraints the text might break across multiple lines or might all be displayed on the same line.",
    "tipColumn": "Row and Column are the two most important and powerful widgets in Flutter. These widgets let you align children horizontally and vertically as per the requirement. As we know that when we design any UI(User Interface) in flutter, we need to arrange its content in the Row and Column manner so these Row and Column widgets are required when designing UI. It creates a vertical array of children. Alignment Properties: In this also we have mainAxisAlignment and crossAxisAlignment. In column, children are aligned from top to bottom. Main Axis is vertical and the Cross Axis is horizontal. MainAxisAlignment aligns its children vertically and CrossAxisAlignment aligns horizontally in that Column.",
    "tipRow": "Row and Column are the two most important and powerful widgets in Flutter. These widgets let you align children horizontally and vertically as per the requirement. As we know that when we design any UI(User Interface) in flutter, we need to arrange its content in the Row and Column manner so these Row and Column widgets are required when designing UI. It creates a horizontal array of children. Alignment Properties: We can align content as per our choice by using mainAxisAlignment and crossAxisAlignment. Row’s mainAxis is horizontal and cross Axis to Row’s main Axis is vertical. We can align children horizontally using MainAxisAlignment and vertically using CrossAxisAlignment in that row.",
    "tipDivider": "A thin horizontal line, with padding on either side. In the material design language, this represents a divider. Dividers can be used in lists, Drawers, and elsewhere to separate content.",
    "tipVerticalDivider": "A thin vertical line, with padding on either side. In the material design language, this represents a divider. Vertical dividers can be used in horizontally scrolling lists, such as a ListView with ListView.scrollDirection set to Axis.horizontal. The box's total width is controlled by width. The appropriate padding is automatically computed from the width.",
    "tipButton": "Use text buttons on toolbars, in dialogs, or inline with other content but offset from that content with padding so that the button's presence is obvious. Text buttons do not have visible borders and must therefore rely on their position relative to other content for context. In dialogs and cards, they should be grouped together in one of the bottom corners. Avoid using text buttons where they would blend in with other content, for example in the middle of lists.",
    "tipIcon": "Icon class in Flutter is used to show specific icons in our app. Instead of creating an image for our icon, we can simply use the Icon class for inserting an icon in our app. For using this class you must ensure that you have set uses-material-design: true in the pubspec.yml file of your object.",
    "tipImage": "Flutter apps can include both code and assets (sometimes called resources). An asset is a file that is bundled and deployed with your app, and is accessible at runtime. Common types of assets include static data (for example, JSON files), configuration files, icons, and images (JPEG, WebP, GIF, animated WebP/GIF, PNG, BMP, and WBMP).",
    "tipBottomSheet": "Modal Bottom Sheet is an alternative to a menu or a dialog and prevents the user from interacting with the rest of the app. It will appear over the UI so that there is no need to navigate to a different page. It can be used to perform a small task that does not require the whole new screen to be built.",
    "tipMediaQuery": "During the process of developing an app for both phones and tablets, it is standard practice to have different UI layouts for different screen sizes for a better user experience. If the user has a preference set for different font sizes or wants to curtail animations. This is where MediaQuery comes into action, you can get information about the current device size, as well as user preferences, and design your layout accordingly. MediaQuery provides a higher-level view of the current app’s screen size and can also give more detailed information about the device and its layout preferences. In practice, MediaQuery is always there. It can simply be accessed by calling MediaQuery.of in the build method. From there you can look up all sorts of interesting information about the device you’re running on, like the size of the screen, and build your layout accordingly. MediaQuery can also be used to check the current device’s orientation or can be used to check if the user has modified the default font size. It can also be used to determine if parts of the screen are obscured by a system UI, similar to a safe area widget.",
    "tipDraggable": "When a draggable widget recognizes the start of a drag gesture, it displays a feedback widget that tracks the user's finger across the screen. If the user lifts their finger while on top of a DragTarget, that target is given the opportunity to accept the data carried by the draggable. On multitouch devices, multiple drags can occur simultaneously because there can be multiple pointers in contact with the device at once. To limit the number of simultaneous drags, use the maxSimultaneousDrags property. The default is to allow an unlimited number of simultaneous drags.",
    "tipGlobalKey": "A key that is unique across the entire app. Global keys uniquely identify elements. Global keys provide access to other objects that are associated with those elements, such as BuildContext. For StatefulWidgets, global keys also provide access to State. Widgets that have global keys reparent their subtrees when they are moved from one location in the tree to another location in the tree. In order to reparent its subtree, a widget must arrive at its new location in the tree in the same animation frame in which it was removed from its old location in the tree. Reparenting an Element using a global key is relatively expensive, as this operation will trigger a call to State.deactivate on the associated State and all of its descendants; then force all widgets that depends on an InheritedWidget to rebuild.",
    "tipGestureDetector": "A widget that detects gestures. Attempts to recognize gestures that correspond to its non-null callbacks. If this widget has a child, it defers to that child for its sizing behavior. If it does not have a child, it grows to fit the parent instead. By default a GestureDetector with an invisible child ignores touches; this behavior can be controlled with behavior. GestureDetector also listens for accessibility events and maps them to the callbacks. To ignore accessibility events, set excludeFromSemantics to true.",
    "tipInkWell": "InkWell is the material widget in flutter. It responds to the touch action as performed by the user. Inkwell will respond when the user clicks the button. There are so many gestures like double-tap, long press, tap down, etc. Below are the so many properties of this widget. We can set the radius of the inkwell widget using radius and also border-radius using borderRadius. We can give the splash color using splashColor and can do a lot of things.",
    "tipCard": "Card is a build-in widget in flutter which derives its design from Google’s Material Design Library. The functionality of this widget on screen is, it is bland space or panel with round corners and a slight elevation on the lower side. It comes with many properties like color, shape, shadow color, etc which lets developers customize it the way they like.",
    "tipDrawer": "The Drawer widget is used as an additional sub-router that consists of various links to other routes (ie, pages) in the same application. It has a horizontal movement from the edge of the Scaffold that navigates the link to different routes in the flutter app. All children of a Drawer widget are usually in ListView and initially, only the DrawerHeader is present in the UI which when tapped extends horizontally.",
    "tipTabs": "Tabs are exactly what you think it is. It’s part of the UI that navigates the user through different routes(ie, pages) when clicked upon. The use of tabs in applications is standard practice. Flutter provides a simple way to create tab layouts using the material library.",
    "tipDropdown": "A material design button for selecting from a list of items. A dropdown button lets the user select from a number of items. The button shows the currently selected item as well as an arrow that opens a menu for selecting another item.",
    "tipFutureBuilder": "In Flutter, the FutureBuilder Widget is used to create widgets based on the latest snapshot of interaction with a Future. It is necessary for Future to be obtained earlier either through a change of state or change in dependencies. FutureBuilder is a Widget that will help you to execute some asynchronous function and based on that function’s result your UI will update. FutureBuilder is Stateful by nature i.e it maintains its own state as we do in StatefulWidgets.",
    "tipStack": "Stack widget is a built-in widget in flutter SDK which allows us to make a layer of widgets by putting them on top of each other. Many of the times a simple row and column layout is not enough, we need a way to overlay one widget on top of the other, for example, we might want to show some text over an image, so to tackle such a situation we have Stack widget. The Stack widget has two types of child one is positioned which are wrapped in the Positioned widget and the other one is non–positioned which is not wrapped in the Positioned widget. For all the non-positioned widgets the alignment property is set to the top-left corner. The positioned child widgets are positioned through the top, right, left, and bottom properties. The child widgets are of Stack are printed in order the top-most widget becomes the bottom-most on the screen and vice-versa. We can use the key property of the Stack widget to change that order or to assign a different order.",
    "tipPageView": "The PageView widget allows the user to transition between different screens in their flutter application. All you need to set it up are a PageViewController and a PageView.",
    "tipTable": "Table widget is used to display items in a table layout. There is no need to use Rows and Columns to create a table. If we have multiple rows with the same width of columns then Table widget is the right approach. SliverList or Column will be most suitable if we only want to have a single column. The height of rows in the Tabel widget is dependent on the content inside them. But the width of the column can be changed by specifying columnWidths property.",
    "tipDismissible": "A widget that can be dismissed by dragging in the indicated direction. Dragging or flinging this widget in the DismissDirection causes the child to slide out of view. Following the slide animation, if resizeDuration is non-null, the Dismissible widget animates its height (or width, whichever is perpendicular to the dismiss direction) to zero over the resizeDuration.",
    "tipSnackBar": "A lightweight message with an optional action which briefly displays at the bottom of the screen.",
    "tipGridView": "Flutter GridView is a widget that is similar to a 2-D Array in any programming language. As the name suggests, a GridView Widget is used when we have to display something on a Grid. We can display images, text, icons, etc on GridView.",
    "tipSliverAppBar": "SliverAppBar is a Material Design widget in flutter which gives scrollable or collapsible app-bar. The word Sliver is given to scrollable areas here. SliverAppBar basically gives us means to create an app-bar that can change appearance, blend in the background, or even disappear as we scroll. We already had AppBar widget in flutter which places the app bar at a fixed height. But, looking around us we can see that the scrollable app bar user interface is widely used. In order to achieve the same functionality, flutter gives us SliverAppBar widget, which is usually taken as a child widget to CustomScrollView (flutter widget), which provided it the power to interact with scroll.",
    "tipSliverGrid": "A sliver that places multiple box children in a two dimensional arrangement. SliverGrid places its children in arbitrary positions determined by gridDelegate. Each child is forced to have the size specified by the gridDelegate. The main axis direction of a grid is the direction in which it scrolls; the cross axis direction is the orthogonal direction.",
    "tipNavigator": "Navigator: As the name suggests, Navigator is a widget that helps us to navigate between the routes. The navigator follows stack method when dealing with the routes. Based on the actions made by the user, the routes are stacked one over the other and when pressed back, it goes to the most recently visited route. Navigator is a widget that follows a stack discipline.",
    "tipDialog": "The dialog is a type of widget which comes on the window or the screen which contains any critical information or can ask for any decision. When a dialog box is popped up the all the other functions get disabled until you close the dialog box or provide an answer. We use a dialog box for a different type of condition such as alert notification, simple notification in which different options are shown, or we can also make a dialog box which can be used as a tab for showing the dialog box.",
    "tipSendData": "Often, you not only want to navigate to a new screen, but also pass data to the screen as well. For example, you might want to pass information about the item that’s been tapped. Remember: Screens are just widgets.",
    "tipListView": "In Flutter, ListView is a scrollable list of widgets arranged linearly. It displays its children one after another in the scroll direction i.e, vertical or horizontal.",
    "tipPopupMenuButton": "Displays a menu when pressed and calls onSelected when the menu is dismissed because an item was selected. The value passed to onSelected is the value of the selected menu item. One of child or icon may be provided, but not both. If icon is provided, then PopupMenuButton behaves like an IconButton.",
    "tipRefreshIndicator": "A widget that supports the Material 'swipe to refresh' idiom. When the child's Scrollable descendant overscrolls, an animated circular progress indicator is faded into view. When the scroll ends, if the indicator has been dragged far enough for it to become completely opaque, the onRefresh callback is called. The callback is expected to update the scrollable's contents and then complete the Future it returns. The refresh indicator disappears after the callback's Future has completed.",
    "tipClipRect": "The ClipRect widget is used to clips its child using a rectangle. It associates with the Clippers family. The main use of clippers is to clip out any portion of the widget as required. It behaves similar to that of ClipRRect and is used to Clip a Rectangle portion of the child widget but without the rounded corners.",
    "tipClipRRect": "The ClipRRect widget in flutter is used to clips its child using a rounded rectangle. It associates with the Clippers family. The main use of clippers is to clip out any portion of the widget as required. It behaves similar to that of ClipRect and is used to Clip a Rectangle portion of the child widget but with rounded corners.",
    "tipClipOval": "ClipOval widget clips the child widget in oval or circle shape. We can reshape the child widget by changing width and height. If width and height are equal the shape will be circular. If the width and height are given differently then the shape will be oval.",
    "tipClipPath": "A widget that clips its child using a path. Calls a callback on a delegate whenever the widget is to be painted. The callback returns a path and the widget prevents the child from painting outside the path.",
    "tipFlexible": "Flexible is a built-in widget in flutter which controls how a child of base flex widgets that are Row, Column, and Flex will fill the space available to it. The Expanded widget in flutter is shorthand of Flexible with the default fit of FlexFit.tight. Flexible widget plays a very important part in making a responsive app that looks and feels the same across multiple device sizes. But if one wants just basic filling up of spaces by widgets, then Expanded is also a good candidate for that.",
    "tipExpanded": "Expanded widget in flutter comes in handy when we want a child widget or children widgets to take all the available space along the main-axis (for Row the main axis is horizontal & vertical for Column). Expanded widget can be taken as the child of Row, Column, and Flex. And in case if we don’t want to give equal spaces to our children widgets we can distribute the available space as our will using flex factor. Expanded widget is similar to the Flexible widget in flutter, with its fit property set to FlexFit.tight as default. Expanded widget is basically a shorthand of Flexible widget. But if you are planning to build responsive apps or web apps, then you should definitely switch to Flexible to get more fit options.",
    "tipCircleAvatar": "CircleAvatar widget comes built-in with the flutter SDK. It is simply a circle in which we can add background color, background image, or just some text. It usually represents a user with his image or with his initials. Although we can make a similar widget from the ground up, this widget comes in handy in the fast development of an application.",
    "tipFittedBox": "FittedBox is a very useful widget that scales and positions its child within itself according to fit and alignment. Consider an app, in which, you have to take input from the user and in a certain scenario, the user enters a large input that overflows and scatters other widgets. As many of the widgets are dynamic, which means they can grow and shrink in size, according to their child widget’s size. So, in this case, the user interface wouldn’t be adaptive. In order to overcome this problem, we can use the FittedBox widget. FittedBox restricts its child widgets from growing its size beyond a certain limit. It re-scales them according to the size available. For instance, if the text is displayed inside a container, and the text is to be entered by the user. If the user enters a large string of text, then the container would grow beyond its allocated size. But, if we wrap it with FittedBox, then it would fit the text according to the size available. For large string, it would shrink its size, hence would fit in the container.",
    "tipVisibility": "Whether to show or hide a child. By default, the visible property controls whether the child is included in the subtree or not; when it is not visible, the replacement child (typically a zero-sized box) is included instead. A variety of flags can be used to tweak exactly how the child is hidden. (Changing the flags dynamically is discouraged, as it can cause the child subtree to be rebuilt, with any state in the subtree being discarded. Typically, only the visible flag is changed dynamically.)",
    "tipBoxDecoration": "BoxDecoration is a build-in widget in flutter API. At a bare basic level, it describes how a box should be painted on the screen. The shape of the box needs not to be just a rectangle or a square it can circle also. It comes with a ton of properties we can add an image inside, add a radius to the border (if the shape is a rectangle), cast shadow to the box, etc.",
    "tipSelectableText": "A run of selectable text with a single style. The SelectableText widget displays a string of text with a single style. The string might break across multiple lines or might all be displayed on the same line depending on the layout constraints.",
    "tipInteractiveViewer": "A widget that enables pan and zoom interactions with its child.",
    "tipSlider": "A Material Design slider. Used to select from a range of values.",
    "tipChip": "A material design chip. Chips are compact elements that represent an attribute, text, entity, or action. Supplying a non-null onDeleted callback will cause the chip to include a button for deleting the chip.",
    "tipAspectRatio": "A widget that attempts to size the child to a specific aspect ratio. The widget first tries the largest width permitted by the layout constraints. The height of the widget is determined by applying the given aspect ratio to the width, expressed as a ratio of width to height.",
    "tipPlaceholder": "A widget that draws a box that represents where other widgets will one day be added. This widget is useful during development to indicate that the interface is not yet complete.",
    "tipSpacer": "Spacer creates an adjustable, empty spacer that can be used to tune the spacing between widgets in a Flex container, like Row or Column. The Spacer widget will take up any available space, so setting the Flex.mainAxisAlignment on a flex container that contains a Spacer to MainAxisAlignment.spaceAround, MainAxisAlignment.spaceBetween, or MainAxisAlignment.spaceEvenly will not have any visible effect: the Spacer has taken up all of the additional space, therefore there is none left to redistribute.",
    "tipListWheelScrollView": "ListWheelScrollView is a flutter widget that is used to build ListView with 3D-effect. We can also use ListView to create a list of items but we can’t add a 3D effect to it plus it also comes with a constrain that all the children inside this widget must be of the same size along the strolling axis. Flutter’s ListWheelScrollView adds its children in a scrollable wheel. That results in a 3D effect as if the children are rotating in a wheel. This widget comes with many properties. Some allow us to set the diameter of the wheel, make of off-set, or even add a magnification effect.",
    "tipImageLoadingBuilder": "A builder that specifies the widget to display to the user while an image is still loading. If this is null, and the image is loaded incrementally (e.g. over a network), the user will receive no indication of the progress as the bytes of the image are loaded.",
    "tipMouseRegion": "A widget that tracks the movement of mice. MouseRegion is used when it is needed to compare the list of objects that a mouse pointer is hovering over between this frame and the last frame. This means entering events, exiting events, and mouse cursors.",
    "tipOpacity": "The Opacity widget that makes its child partially transparent. This class colors its child into an intermediate buffer and then merges the child back into the scene partially transparent. For values of opacity other than 0.0 and 1.0, this class is relatively expensive as it needs coloring the child into an intermediate buffer. For the value 0.0, the child is simply not colored at all. For the value 1.0, the child is colored without an intermediate buffer.",
    "tipConstrainedBox": "A widget that imposes additional constraints on its child. For example, if you wanted child to have a minimum height of 50.0 logical pixels, you could use const BoxConstraints(minHeight: 50.0) as the constraints.",
    "tipAlign": "Align Widget is the widget that is used to align its child within itself and optionally sizes itself based on the child’s size. Align Widget is quite flexible and can change its size according to the size of its child.",
    "tipLayoutBuilder": "Builds a widget tree that can depend on the parent widget's size. Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints. This is useful when the parent constrains the child's size and doesn't depend on the child's intrinsic size. The LayoutBuilder's final size will match its child's size.",
    "tipPadding": "Padding widget in flutter does exactly what its name says, it adds padding or empty space around a widget or a bunch of widgets. We can apply padding around any widget by placing it as the child of the Padding widget. The size of the child widget inside padding is constrained by how much space is remaining after adding empty space around. The Padding widget adds empty space around any widget by using the abstract EdgeInsetsGeometry class.",
    "tipAbsorbPointer": "AbsorbPointer is a built-in widget in flutter which absorbs pointer, in other words, it prevents its subtree from being clicked, tapped, scrolled, dragged, and respond to hover. In flutter, most widgets already come with an option to disable them for example in a RaisedButton we can set the onClicked function to null to disable, or we can use NeverScrollableScrollPhysics( ) to disable a ListView. But if we want to disable a whole widget tree or even a full screen at once, we can do it with the help of the AbsorbPointer widget. IgnorePointer is also a similar widget in flutter, which also prevents its children from being clicked.",
    "tipIgnorePointer": "IgnorePointer is a built-in widget in flutter which is similar to the AbsorbPointer widget, they both prevent their children’s widget from pointer-events which are taping, clicking, dragging, scrolling, and hover. They both do the same thing in two different ways, the AbsorbPointer widget absorbs all the pointer-events, which means the pointers events are completely terminated and cannot be passed anywhere else. On the other hand, the IgnorePointer widget just ignores the pointer-events without terminating it, which means if there is any other element below the IgnorePointer widget tree then it will be able to experience that pointer-event.",
    "tipTooltip": "Tooltip is a built-in widget in flutter based on material design, which displays a textual description of the widget in a floating label when a user long-pressed and or hover over the widget. Tooltip widget becomes very useful when the UI of the application is too dense to display all the information at once on the screen, in a way it simply makes the app more accessible. There are two ways to implement the Tooltip in a widget, the first one is by using the widget itself and the other way is limited to some widgets such as IconButton, FloatingActionButton, etc which provide tooltip as a property which in turn takes in a string as a parameter. One should remember that the Tooltip widget is customizable through its properties but the tooltip property isn’t.",
    "tipFlutterLogo": "FlutterLogo widget is as simple as it sounds, it is just the flutter logo in the form of an icon. This widget also comes built-in with flutter SDK. This widget can found its use as a placeholder for an image or icon.",
    "tipSizedBox": "SizedBox is a built-in widget in flutter SDK. It is a simple box with a specified size. It can be used to set size constraints to the child widget, put an empty SizedBox between the two widgets to get some space in between, or something else. It is somewhat similar to a Container widget with fewer properties.",
    "tipFloatingActionButton": "A floating action button is a circular icon button that hovers over content to promote a primary action in the application. Floating action buttons are most commonly used in the Scaffold.floatingActionButton field.",
    "tipCheckbox": "Checkbox in flutter is a material design widget. It is always used in the Stateful Widget as it does not maintain a state of its own. We can use its onChanged property to interact or modify other widgets in the flutter app. Like most of the other flutter widgets, it also comes with many properties like activeColor, checkColor, mouseCursor, etc, to let developers have full control over the widget’s look and feel.",
    "tipEndDrawer": "The EndDrawer is the panel displayed to the side of the body (Scaffold Widget). It is generally hidden in mobile devices. We can open it by swiping in from right to left, or we can customise it to open on-press of an icon or a button. This widget is similar to the already present Drawer widget in flutter except for the fact the Drawer by default open from left-to-right and the endDrawer by default opens from right-to-left. However, this direction can be changed by using textDirection property.",
    "tipBanner": "Banner widget comes built-in with flutter API. It is somewhat similar to the debug banner what we are used to of seeing on the top-right corner on a flutter app in debug mode. It enables us to show a message or text on top of any other widget.",
    "tipBorderRadius": "BorderRadius is a built-in widget in flutter. Its main functionality is to add a curve around the border-corner of a widget. There are in total of five ways in which we can use this widget, the first is by using BorderRadius.all, the radius for all the corners are the same here. The second way is by using BorderRadius.Circle, here we need to specify radius only once which would be a double value. The third way is by using BorderRadius.horizontal, here we can specify different border-radius for the left and the right side. The fourth way is by using BorderRadius.only, it can take a different radius for all four border corners. And the last way is by using BorderRadius.vertical, which can give a different radius to the upper and the lower portion of the border.",
    "tipSingleChildScrollView": "A box in which a single widget can be scrolled. This widget is useful when you have a single box that will normally be entirely visible, for example a clock face in a time picker, but you need to make sure it can be scrolled if the container gets too small in one axis (the scroll direction).",
    "tipBoxShadow": "BoxShadow is a built-in widget in flutter, whose functionality is to cast shadow to a box. The BoxShadow widget is usually used with BoxDecoration. In BoxDecoration widget one of its parameters is boxShadow which takes a list of BoxShadow to cast a shadow around a box.",
    "tipBottomNavigationBar": "The BottonNavigationBar widget is used to show the bottom of an app. It can consist of multiple items such as icons, text, or both that leads to a different route depending upon the design of the application. It is meant to help the user navigate to different sections of the application in general.",
    "tipExpansionPanel": "When we want to expand and collapse things then we can do this with the help of an expansion panel. This Expansion panel list is mostly used in the apps and provides extra features to the app. We can create a list of children and wrap it with an Expansion Panel List. We can also create more than one expansion panel in our app. We can control whether the panel is open or not by isExpanded property.",
    "tipPaint": "A description of the style to use when drawing on a Canvas. Most APIs on Canvas take a Paint object to describe the style to use for that operation.",
    "tipClipboard": "Utility methods for interacting with the system clipboard.",
    "tipPageRouteBuilder": "Routes are simply Pages in Flutter applications. An application often needs to move from one page to another. But to make these transition smoother, Animations can be used. These animations can be used to curve or tween the Animation object of the PageRouteBuilder class to alter the transition animation.",
    "tipShaderMask": "A widget that applies a mask generated by a Shader to its child.",
    "tipAnimatedContainer": "In Flutter a container is a simple widget with well-defined properties like height, width, and color, etc. The AnimatedContainer widget is a simple container widget with animations. These types of widgets can be animated by altering the values of their properties which are the same as the Container widget. These types of animation in Flutter is known as ‘Implicit Animation. We will discuss then in detail in this article by building a simple app with AnimatedContainer widget.",
    "tipAnimatedCrossFade": "A widget that cross-fades between two given children and animates itself between their sizes.",
    "tipAnimatedOpacity": "Animated version of Opacity which automatically transitions the child's opacity over a given duration whenever the given opacity changes.",
    "tipAnimatedDefaultTextStyle": "Animated version of DefaultTextStyle which automatically transitions the default text style (the text style to apply to descendant Text widgets without explicit style) over a given duration whenever the given style changes.",
    "tipCustomPaint": "The interface used by CustomPaint (in the widgets library) and RenderCustomPaint (in the rendering library). To implement a custom painter, either subclass or implement this interface to define your custom paint delegate. CustomPaint subclasses must implement the paint and shouldRepaint methods, and may optionally also implement the hitTest and shouldRebuildSemantics methods, and the semanticsBuilder getter.",
    "tipTransform": "A widget that applies a transformation before painting its child. Unlike RotatedBox, which applies a rotation prior to layout, this object applies its transformation just prior to painting, which means the transformation is not taken into account when calculating how much space this widget's child (and thus this widget) consumes.",
    "tipDraggableScrollableSheet": "A container for a Scrollable that responds to drag gestures by resizing the scrollable until a limit is reached, and then scrolling.",
    "tipIndexedStack": "A Stack that shows a single child from a list of children. The displayed child is the one with the given index. The stack is always as big as the largest child.",
    "tipColorFiltered": "Applies a ColorFilter to its child. This widget applies a function independently to each pixel of child's content, according to the ColorFilter specified. Use the ColorFilter.mode constructor to apply a Color using a BlendMode. Use the BackdropFilter widget instead, if the ColorFilter needs to be applied onto the content beneath child.",
    "tipDataTable": "DataTable widget allows you to build a table that automatically sizes its columns according to what’s actually in the cells.",
    "tipFadeInImage": "An image that shows a placeholder image while the target image is loading, then fades in the new image when it loads. Use this class to display long-loading images, such as new NetworkImage, so that the image appears on screen with a graceful animation rather than abruptly popping onto the screen.",
    "tipFadeTransition": "Animates the opacity of a widget.",
    "tipImageFiltered": "Flutter provides an ImageFiltered, a low-level class that takes pixels and rearranges them. It applies an ImageFilter to its child. A filter operation to apply to a raster image. ImageFiltered will blur the images, text, and anything will be blurry. It also works on any matrix for transformation like scaling, translating, skewing, rotating, etc.",
    "tipPositioned": "A widget that controls where a child of a Stack is positioned. A Positioned widget must be a descendant of a Stack, and the path from the Positioned widget to its enclosing Stack must contain only StatelessWidgets or StatefulWidgets (not other kinds of widgets, like RenderObjectWidgets).",
    "tipLinearProgressIndicator": "A LinearProgressIndicator also known as a progress bar is a widget that shows progress in a linear direction or along a line to indicate that the application is in progress.",
    "tipLimitedBox": "A box that limits its size only when it's unconstrained. If this widget's maximum width is unconstrained then its child's width is limited to maxWidth. Similarly, if this widget's maximum height is unconstrained then its child's height is limited to maxHeight.",
    "tipAnimatedSwitcher": "A widget that by default does a cross-fade between a new widget and the widget previously set on the AnimatedSwitcher as a child.",
    "tipCheckboxListTile": "CheckboxListTile is a built-in widget in flutter. We can say it a combination of CheckBox with a ListTile. Its properties such as value, activeColor, and checkColor are similar to the CheckBox widget, and title, subtitle, contentPadding, etc are similar to the ListTile widget. We can tap anywhere on the CheckBoxListTile to active the checkbox.",
    "tipSwitchListTile": "A ListTile with a Switch. In other words, a switch with a label.",
    "tipExpansionPanelList": "A material expansion panel list that lays out its children and animates expansions.",
    "tipFractionallySizedBox": "A widget that sizes its child to a fraction of the total available space.",
    "tipScrollbar": "Scrollbars are interactive and will also use the PrimaryScrollController if a controller is not set. Scrollbar thumbs can be dragged along the main axis of the ScrollView to change the ScrollPosition. Tapping along the track exclusive of the thumb will trigger a ScrollIncrementType.page based on the relative position to the thumb.",
    "tipOverflowBox": "A widget that imposes different constraints on its child than it gets from its parent, possibly allowing the child to overflow the parent.",
    "tipRadioListTile": "A ListTile with a Radio. In other words, a radio button with a label. The entire list tile is interactive: tapping anywhere in the tile selects the radio button.",
    "tipTextField": "TextField and TextFormField are the two most common widgets to get input from the user. They can be used in making forms, login pages, etc.",
    "tipScrollController": "Controls a scrollable widget. Scroll controllers are typically stored as member variables in State objects and are reused in each State.build. A single scroll controller can be used to control multiple scrollable widgets, but some operations, such as reading the scroll offset, require the controller to be used with a single scrollable widget."
}