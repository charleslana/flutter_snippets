{
    "appSettings": "Ajustes",
    "appSettingsTheme": "Tema",
    "appSettingsDefaultThemeSystem": "Tema predeterminado definido por el sistema",
    "appSettingsDarkMode": "Modo oscuro",
    "appSettingsLanguage": "Idioma",
    "appSettingsDefaultLanguageSystem": "Idioma predeterminado definido por el sistema",
    "appSettingsLanguagePortuguese": "Portugués",
    "appSettingsLanguageEnglish": "Inglés",
    "appSettingsLanguageSpanish": "Español",
    "appInfoTitle": "Información",
    "appInfoLaunchError": "No se pudo iniciar",
    "appNewsTitle": "Noticias",
    "appNewsError": "Algo salió mal inténtalo más tarde",
    "appNewsNoNews": "No hay noticias",
    "appNewsDateFormat": "dd/MM/yyyy",
    "tabBarTitleExample": "Ejemplo",
    "tabBarTitleCode": "Código",
    "utilCopyCodeMessage": "Código copiado",
    "utilToastClose": "Cerca",
    "utilAlertNoInformation": "No hay información disponible",
    "filterSearchLabel": "Buscar {filter}",
    "filterSearchHint": "{filter}",
    "filterSearchNoResults": "No hay resultados",
    "menuBasicDart": "Dart Básico",
    "menuBasicComments": "Comentarios",
    "menuBasicVariables": "Variables",
    "menuBasicNomenclatures": "Nomenclaturas",
    "menuBasicTypes": "Tipos",
    "menuBasicMathOperations": "Operaciones Matemáticas",
    "menuBasicConcatenationStrings": "Concatenación de Strings",
    "menuBasicNullSafety": "Null Safety",
    "menuBasicFluxControl": "Control de Flujo",
    "menuBasicFunctionsParameters": "Funciones y Parámetros",
    "menuAdvancedDart": "Dart Avanzado",
    "menuAdvancedClasses": "Clases",
    "menuAdvancedFilterClasses": "Clases",
    "menuAdvancedFilterPrivatePublic": "Privado o Público",
    "menuAdvancedFilterGetterSetter": "Getter e Setter",
    "menuAdvancedFilterConstructor": "Constructor",
    "menuAdvancedFilterExtends": "Ampliar",
    "menuAdvancedFilterAbstract": "Resumen",
    "menuAdvancedFilterImplements": "Implementos",
    "menuAdvancedFilterPolymorphism": "Polimorfismo",
    "menuAdvancedList": "Lista",
    "menuAdvancedMap": "Map",
    "menuAdvancedOperatorSpread": "Operador Spread",
    "menuAdvancedCascadeOperator": "Operador Cascada",
    "menuAdvancedPubSpec": "PubSpec",
    "menuWidgetCreate": "Widgets de Creación",
    "menuWidgetCreateStateless": "Widget Apátrida",
    "menuWidgetCreateStateful": "Widget Con el estado",
    "menuWidgetBasic": "Widgets Básico",
    "menuWidgetAdvanced": "Widgets Avanzado",
    "menuWidgetApps": "Apps",
    "menuWidgetBasicSafeArea": "SafeArea",
    "menuWidgetBasicCircularProgressIndicator": "CircularProgressIndicator",
    "menuWidgetBasicContainer": "Container",
    "menuWidgetBasicText": "Texto",
    "menuWidgetBasicTextOverflow": "Texto con Overflow",
    "menuWidgetBasicTextStyle": "Texto estilizado",
    "menuWidgetBasicTextDefaultStyle": "Texto con estilo predeterminado",
    "menuWidgetBasicRichText": "RichText",
    "menuWidgetBasicColumn": "Columna",
    "menuWidgetBasicRow": "Líneas",
    "menuWidgetBasicDivider": "Divisor",
    "menuWidgetBasicVerticalDivider": "Divisor Vertical",
    "menuWidgetBasicTextButton": "TextButton",
    "menuWidgetBasicElevatedButton": "ElevatedButton",
    "menuWidgetBasicElevatedButtonIcon": "ElevatedButton con Icono",
    "menuWidgetBasicOutlinedButton": "OutlinedButton",
    "menuWidgetBasicIcon": "Icono",
    "menuWidgetBasicIconBackground": "Icono con fondo",
    "menuWidgetBasicImage": "Imagen",
    "menuWidgetBasicBottomSheet": "BottomSheet",
    "menuWidgetBasicMediaQuery": "MediaQuery",
    "menuWidgetBasicGestureDetector": "GestureDetector",
    "menuWidgetBasicInkWell": "InkWell",
    "menuWidgetBasicCard": "Card",
    "menuWidgetBasicFutureBuilder": "FutureBuilder",
    "menuWidgetBasicStack": "Apilar",
    "menuWidgetBasicPageView": "PageView",
    "menuWidgetBasicTable": "Tabla",
    "menuWidgetBasicSnackBar": "SnackBar",
    "menuWidgetBasicDialog": "Dialog",
    "menuWidgetBasicListView": "ListView",
    "menuWidgetBasicRotatedBox": "Caja Girada",
    "menuWidgetBasicClipRect": "ClipRect",
    "menuWidgetBasicClipRRect": "ClipRRect",
    "menuWidgetBasicClipOval": "ClipOval",
    "menuWidgetBasicFlexible": "Flexible",
    "menuWidgetBasicExpanded": "Expanded",
    "menuWidgetBasicCircleAvatar": "CircleAvatar",
    "menuWidgetBasicFittedBox": "FittedBox",
    "menuWidgetBasicVisibility": "Visibilidad",
    "menuWidgetBasicBoxDecoration": "BoxDecoration",
    "menuWidgetBasicSelectableText": "SelectableText",
    "menuWidgetBasicInteractiveViewer": "InteractiveViewer",
    "menuWidgetBasicAspectRatio": "AspectRatio",
    "menuWidgetBasicPlaceholder": "Placeholder",
    "menuWidgetBasicSpacer": "Spacer",
    "menuWidgetBasicListWheelScrollView": "ListWheelScrollView",
    "menuWidgetBasicOpacity": "Opacidad",
    "menuWidgetBasicConstrainedBox": "ConstrainedBox",
    "menuWidgetBasicAlign": "Alinear",
    "menuWidgetBasicPadding": "Padding",
    "menuWidgetBasicAbsorbPointer": "AbsorbPointer",
    "menuWidgetBasicIgnorePointer": "IgnorePointer",
    "menuWidgetBasicTooltip": "Tooltip",
    "menuWidgetBasicColors": "Colores",
    "menuWidgetBasicFlutterLogo": "FlutterLogo",
    "menuWidgetBasicSizedBox": "SizedBox",
    "menuWidgetBasicFloatingActionButton": "FloatingActionButton",
    "menuWidgetBasicCheckbox": "Checkbox",
    "menuWidgetBasicEndDrawer": "EndDrawer",
    "menuWidgetBasicContainerTransform": "ContainerTransform",
    "menuWidgetBasicBanner": "Banner",
    "menuWidgetBasicBorderRadius": "BorderRadius",
    "menuWidgetBasicSingleChildScrollView": "SingleChildScrollView",
    "menuWidgetBasicBoxShadow": "BoxShadow",
    "menuWidgetBasicShaderMask": "ShaderMask",
    "menuWidgetBasicColorFiltered": "ColorFiltered",
    "menuWidgetBasicDataTable": "DataTable",
    "menuWidgetBasicImageFiltered": "ImageFiltered",
    "menuWidgetBasicPositioned": "Positioned",
    "menuWidgetBasicLinearProgressIndicator": "LinearProgressIndicator",
    "menuWidgetBasicRawString": "RawString",
    "menuWidgetBasicLimitedBox": "LimitedBox",
    "menuWidgetBasicCheckboxListTile": "CheckboxListTile",
    "menuWidgetBasicSwitchListTile": "SwitchListTile",
    "menuWidgetBasicExpansionPanelList": "ExpansionPanelList",
    "menuWidgetBasicFractionallySizedBox": "FractionallySizedBox",
    "menuWidgetBasicScrollbar": "Scrollbar",
    "menuWidgetBasicOverflowBox": "OverflowBox",
    "menuWidgetBasicRadioListTile": "RadioListTile",
    "menuWidgetBasicTextField": "TextField",
    "menuWidgetAdvancedRefreshIndicator": "RefreshIndicator",
    "menuWidgetAdvancedDraggable": "Drag and Drop",
    "menuWidgetAdvancedGlobalKey": "GlobalKey",
    "menuWidgetAdvancedDrawer": "Drawer",
    "menuWidgetAdvancedDropdown": "Dropdown",
    "menuWidgetAdvancedDismissible": "Dismissible",
    "menuWidgetAdvancedGridView": "GridView",
    "menuWidgetAdvancedSilverAppBar": "SilverAppBar",
    "menuWidgetAdvancedSilverGrid": "SilverGrid",
    "menuWidgetAdvancedNavigator": "Navegador",
    "menuWidgetAdvancedNavigatorWithArguments": "Navegador con Argumentos",
    "menuWidgetAdvancedSendDataToScreen": "Enviar Datos a la Pantalla",
    "menuWidgetAdvancedPopupMenuButton": "PopupMenuButton",
    "menuWidgetAdvancedTabs": "Pestañas",
    "menuWidgetAdvancedClipPath": "ClipPath",
    "menuWidgetAdvancedSlider": "Slider",
    "menuWidgetAdvancedListViewWithSearch": "ListViewWithSearch",
    "menuWidgetAdvancedChip": "Chip",
    "menuWidgetAdvancedImageLoadingBuilder": "ImageLoadingBuilder",
    "menuWidgetAdvancedMouseRegion": "MouseRegion",
    "menuWidgetAdvancedLayoutBuilder": "LayoutBuilder",
    "menuWidgetAdvancedBottomNavigationBar": "BottomNavigationBar",
    "menuWidgetAdvancedExpansionPanel": "ExpansionPanel",
    "menuWidgetAdvancedPaint": "Paint",
    "menuWidgetAdvancedLoadJson": "LoadJson",
    "menuWidgetAdvancedClipboard": "Clipboard",
    "menuWidgetAdvancedPageRouteBuilder": "PageRouteBuilder",
    "menuWidgetAdvancedLoadTxt": "LoadTxt",
    "menuWidgetAdvancedIndexedStack": "IndexedStack",
    "menuWidgetAdvancedScrollController": "ScrollController",
    "menuWidgetAppStopwatch": "Cronógrafo",
    "menuWidgetAppCountdown": "Cuenta Regresiva",
    "menuAnimation": "Animaciones",
    "menuAnimationAnimationIcon": "Icono de Animación",
    "menuAnimationAnimatedContainer": "AnimatedContainer",
    "menuAnimationAnimatedCrossFade": "AnimatedCrossFade",
    "menuAnimationAnimatedOpacity": "AnimatedOpacity",
    "menuAnimationAnimatedDefaultTextStyle": "AnimatedDefaultTextStyle",
    "menuAnimationCustomPaint": "CustomPaint",
    "menuAnimationRotatingCircle": "RotatingCircle",
    "menuAnimationTransform": "Transformar",
    "menuAnimationMatrix": "Matrix",
    "menuAnimationDraggableScrollableSheet": "DraggableScrollableSheet",
    "menuAnimationAnimatedImage": "Imagen Animada",
    "menuAnimationHero": "Hero",
    "menuAnimationFadeInImage": "FadeInImage",
    "menuAnimationFadeTransition": "FadeTransition",
    "menuAnimationAnimatedSwitcher": "AnimatedSwitcher",
    "tipRotatedBox": "El widget RotatedBox se utiliza para rotar a su hijo en un número entero de cuartos de vuelta. Se utiliza para orientar los widgets secundarios en orientación horizontal o vertical. Además, es muy liviano y se puede usar para diseñar varias UI, ya que brinda flexibilidad al usuario sobre el diseño de la aplicación.",
    "tipSafeArea": "SafeArea es un widget importante y útil en Flutter que hace que la interfaz de usuario sea dinámica y adaptable a una amplia variedad de dispositivos. Al diseñar el diseño de los widgets, consideramos diferentes tipos de dispositivos y sus limitaciones de pantalla pre-ocupadas como barra de estado, muescas, barra de navegación, etc. Pero se están lanzando nuevos dispositivos con diferentes diseños y en ciertos escenarios, su aplicación puede superponerse cualquiera de esas limitaciones preocupadas. Por lo tanto, para que nuestra interfaz de usuario sea adaptable y esté libre de errores, usamos el widget SafeArea. En palabras simples, SafeArea es básicamente un widget de relleno, que agrega cualquier relleno necesario a su aplicación, según el dispositivo en el que se está ejecutando. Si los widgets de su aplicación se superponen a cualquiera de las funciones del sistema, como muescas, barra de estado, orificios de la cámara o cualquier otra función similar, SafeArea agregaría relleno alrededor de la aplicación, según sea necesario. Internamente, SafeArea usa MediaQuery para verificar las dimensiones de la pantalla e incluye relleno adicional si es necesario.",
    "tipContainer": "La clase de contenedor en flutter es un widget de conveniencia que combina la pintura, el posicionamiento y el tamaño de los widgets. Una clase de contenedor se puede utilizar para almacenar uno o más widgets y colocarlo en la pantalla según nuestra conveniencia. Básicamente, un contenedor es como una caja para almacenar contenido. Un elemento contenedor básico que almacena un widget tiene un margen que separa el contenedor actual con otros contenidos. El contenedor total puede tener un borde de diferentes formas, por ejemplo, rectángulos redondeados, etc. Un contenedor rodea a su hijo con relleno y luego aplica restricciones adicionales a la extensión acolchada (incorporando el ancho y la altura como restricciones, si alguna de ellas no es nulo).",
    "tipText": "El widget de texto muestra una cadena de texto con un solo estilo. La cadena puede dividirse en varias líneas o puede que todas se muestren en la misma línea, dependiendo de las restricciones de diseño.",
    "tipRichText": "El widget RichText se usa para mostrar texto que usa varios estilos diferentes. El texto mostrado se describe mediante un árbol de objetos TextSpan, cada uno de los cuales tiene su propio estilo asociado que se utiliza para ese subárbol. Dependiendo de las restricciones de diseño, el texto puede dividirse en varias líneas o puede mostrarse todo en la misma línea.",
    "tipColumn": "Row y Column son los dos widgets más importantes y poderosos de Flutter. Estos widgets le permiten alinear a los niños horizontal y verticalmente según el requisito. Como sabemos que cuando diseñamos cualquier UI (interfaz de usuario) en flutter, necesitamos organizar su contenido en fila y columna para que estos widgets de fila y columna sean necesarios al diseñar la interfaz de usuario. Crea una matriz vertical de niños. Propiedades de alineación: En esto también tenemos mainAxisAlignment y crossAxisAlignment. En la columna, los niños se alinean de arriba a abajo. El eje principal es vertical y el eje transversal es horizontal. MainAxisAlignment alinea sus elementos secundarios verticalmente y CrossAxisAlignment alinea horizontalmente en esa columna.",
    "tipRow": "Row y Column son los dos widgets más importantes y poderosos de Flutter. Estos widgets le permiten alinear a los niños horizontal y verticalmente según el requisito. Como sabemos que cuando diseñamos cualquier UI (interfaz de usuario) en flutter, necesitamos organizar su contenido en fila y columna para que estos widgets de fila y columna sean necesarios al diseñar la interfaz de usuario. Crea una matriz horizontal de niños. Propiedades de alineación: Podemos alinear el contenido según nuestra elección utilizando mainAxisAlignment y crossAxisAlignment. El eje principal de Row es horizontal y el eje transversal al eje principal de Row es vertical. Podemos alinear a los niños horizontalmente usando MainAxisAlignment y verticalmente usando CrossAxisAlignment en esa fila.",
    "tipDivider": "Una delgada línea horizontal, con relleno a ambos lados. En el lenguaje de diseño de materiales, esto representa un divisor. Los divisores se pueden usar en listas, cajones y en otros lugares para separar contenido.",
    "tipVerticalDivider": "Una delgada línea vertical, con acolchado a ambos lados. En el lenguaje de diseño de materiales, esto representa un divisor. Los divisores verticales se pueden usar en listas de desplazamiento horizontal, como ListView con ListView.scrollDirection establecido en Axis.horizontal. El ancho total de la caja está controlado por el ancho. El relleno apropiado se calcula automáticamente a partir del ancho.",
    "tipButton": "Utilice los botones de texto en las barras de herramientas, en los diálogos o en línea con otro contenido, pero separe ese contenido con un relleno para que la presencia del botón sea obvia. Los botones de texto no tienen bordes visibles y, por lo tanto, deben basarse en su posición en relación con otro contenido para el contexto. En los cuadros de diálogo y las tarjetas, deben agruparse en una de las esquinas inferiores. Evite el uso de botones de texto donde se mezclarían con otro contenido, por ejemplo, en medio de listas.",
    "tipIcon": "La clase de íconos en Flutter se usa para mostrar íconos específicos en nuestra aplicación. En lugar de crear una imagen para nuestro ícono, simplemente podemos usar la clase Icon para insertar un ícono en nuestra aplicación. Para usar esta clase, debe asegurarse de haber establecido uses-material-design: true en el archivo pubsec.yml de su objeto.",
    "tipImage": "Las aplicaciones de Flutter pueden incluir tanto código como activos (a veces llamados recursos). Un activo es un archivo que se incluye y se implementa con su aplicación, y se puede acceder a él en tiempo de ejecución. Los tipos comunes de activos incluyen datos estáticos (por ejemplo, archivos JSON), archivos de configuración, íconos e imágenes (JPEG, WebP, GIF, WebP / GIF animado, PNG, BMP y WBMP).",
    "tipBottomSheet": "La hoja inferior modal es una alternativa a un menú o un diálogo y evita que el usuario interactúe con el resto de la aplicación. Aparecerá sobre la interfaz de usuario para que no sea necesario navegar a una página diferente. Se puede utilizar para realizar una pequeña tarea que no requiere la construcción de una pantalla completamente nueva.",
    "tipMediaQuery": "Durante el proceso de desarrollo de una aplicación para teléfonos y tabletas, es una práctica estándar tener diferentes diseños de interfaz de usuario para diferentes tamaños de pantalla para una mejor experiencia de usuario. Si el usuario tiene una preferencia establecida para diferentes tamaños de fuente o desea reducir las animaciones. Aquí es donde entra en acción MediaQuery, puede obtener información sobre el tamaño actual del dispositivo, así como las preferencias del usuario, y diseñar su diseño en consecuencia. MediaQuery proporciona una vista de nivel superior del tamaño de pantalla de la aplicación actual y también puede brindar información más detallada sobre el dispositivo y sus preferencias de diseño. En la práctica, MediaQuery siempre está ahí. Simplemente se puede acceder llamando a MediaQuery.of en el método de compilación. Desde allí, puede buscar todo tipo de información interesante sobre el dispositivo en el que está ejecutando, como el tamaño de la pantalla, y crear su diseño en consecuencia. MediaQuery también se puede usar para verificar la orientación del dispositivo actual o se puede usar para verificar si el usuario ha modificado el tamaño de fuente predeterminado. También se puede usar para determinar si partes de la pantalla están ocultas por una interfaz de usuario del sistema, similar a un widget de área segura.",
    "tipDraggable": "Cuando un widget que se puede arrastrar reconoce el inicio de un gesto de arrastre, muestra un widget de retroalimentación que rastrea el dedo del usuario por la pantalla. Si el usuario levanta el dedo mientras está encima de un DragTarget, ese objetivo tiene la oportunidad de aceptar los datos transportados por el arrastrable. En los dispositivos multitáctiles, pueden ocurrir múltiples arrastres simultáneamente porque pueden haber múltiples punteros en contacto con el dispositivo a la vez. Para limitar el número de arrastres simultáneos, use la propiedad maxSimededDrags. El valor predeterminado es permitir un número ilimitado de arrastres simultáneos.",
    "tipGlobalKey": "Una clave única en toda la aplicación. Las claves globales identifican elementos de forma única. Las claves globales brindan acceso a otros objetos que están asociados con esos elementos, como BuildContext. Para StatefulWidgets, las claves globales también brindan acceso a State. Los widgets que tienen claves globales vuelven a representar sus subárboles cuando se mueven de una ubicación en el árbol a otra ubicación en el árbol. Para volver a realizar su subárbol, un widget debe llegar a su nueva ubicación en el árbol en el mismo cuadro de animación en el que se eliminó de su ubicación anterior en el árbol. Reparentar un elemento usando una clave global es relativamente costoso, ya que esta operación activará una llamada a State.deactivate en el estado asociado y todos sus descendientes; luego fuerce la reconstrucción de todos los widgets que dependen de un InheritedWidget.",
    "tipGestureDetector": "Un widget que detecta gestos. Intenta reconocer gestos que corresponden a sus devoluciones de llamada no nulas. Si este widget tiene un hijo, lo difiere por su comportamiento de tamaño. Si no tiene un hijo, crece para adaptarse al padre. De forma predeterminada, un GestureDetector con un niño invisible ignora los toques; este comportamiento se puede controlar con el comportamiento. GestureDetector también escucha eventos de accesibilidad y los asigna a las devoluciones de llamada. Para ignorar los eventos de accesibilidad, establezca excludeFromSemantics en verdadero.",
    "tipInkWell": "InkWell es el widget de material en flutter. Responde a la acción táctil realizada por el usuario. Inkwell responderá cuando el usuario haga clic en el botón. Hay tantos gestos como tocar dos veces, presionar prolongadamente, presionar hacia abajo, etc. A continuación se muestran las propiedades de este widget. Podemos establecer el radio del widget del tintero usando radius y también border-radius usando borderRadius. Podemos darle color al splash usando splashColor y podemos hacer muchas cosas.",
    "tipCard": "Card es un widget integrado en Flutter que deriva su diseño de la Biblioteca de diseño de materiales de Google. La funcionalidad de este widget en pantalla es que es un espacio suave o un panel con esquinas redondeadas y una ligera elevación en la parte inferior. Viene con muchas propiedades como color, forma, color de sombra, etc., lo que permite a los desarrolladores personalizarlo a su gusto. A continuación repasaremos todas sus propiedades y un ejemplo para ver su implementación.",
    "tipDrawer": "El widget Drawer se utiliza como un subenrutador adicional que consta de varios enlaces a otras rutas (es decir, páginas) en la misma aplicación. Tiene un movimiento horizontal desde el borde del andamio que navega por el enlace a diferentes rutas en la aplicación Flutter. Todos los elementos secundarios de un widget Drawer suelen estar en ListView e inicialmente, solo DrawerHeader está presente en la interfaz de usuario, que cuando se toca se extiende horizontalmente.",
    "tipTabs": "Las pestañas son exactamente lo que crees que son. Es parte de la interfaz de usuario que conduce al usuario a través de diferentes rutas (es decir, páginas) cuando se hace clic en ella. El uso de pestañas en aplicaciones es una práctica estándar. Flutter proporciona una forma sencilla de crear diseños de pestañas utilizando la biblioteca de materiales.",
    "tipDropdown": "Un botón de diseño de materiales para seleccionar de una lista de elementos. Un botón desplegable permite al usuario seleccionar entre varios elementos. El botón muestra el elemento seleccionado actualmente, así como una flecha que abre un menú para seleccionar otro elemento.",
    "tipFutureBuilder": "En Flutter, el widget FutureBuilder se usa para crear widgets basados en la última instantánea de interacción con un futuro. Es necesario que Future se obtenga antes, ya sea mediante un cambio de estado o un cambio en las dependencias. FutureBuilder es un widget que te ayudará a ejecutar alguna función asincrónica y, según el resultado de esa función, tu interfaz de usuario se actualizará. FutureBuilder es Stateful por naturaleza, es decir, mantiene su propio estado como lo hacemos en StatefulWidgets.",
    "tipStack": "El widget Stack es un widget integrado en el SDK de flutter que nos permite crear una capa de widgets colocándolos uno encima del otro. Muchas de las veces, un simple diseño de filas y columnas no es suficiente, necesitamos una forma de superponer un widget sobre otro, por ejemplo, es posible que queramos mostrar algo de texto sobre una imagen, por lo que para abordar esta situación tenemos Widget de pila. El widget de pila tiene dos tipos de elementos secundarios, uno está posicionado que está envuelto en el widget posicionado y el otro no está posicionado y no está envuelto en el widget posicionado. Para todos los widgets no posicionados, la propiedad de alineación se establece en la esquina superior izquierda. Los widgets secundarios colocados se colocan en las propiedades superior, derecha, izquierda e inferior. Los widgets secundarios de Stack se imprimen para que el widget superior se convierta en el inferior en la pantalla y viceversa. Podemos usar la propiedad clave del widget Stack para cambiar ese orden o asignar un orden diferente.",
    "tipPageView": "El widget PageView permite al usuario realizar la transición entre diferentes pantallas en su aplicación de flutter. Todo lo que necesita para configurarlo es un PageViewController y un PageView.",
    "tipTable": "El widget de tabla se utiliza para mostrar elementos en un diseño de tabla. No es necesario utilizar Filas y Columnas para crear una tabla. Si tenemos varias filas con el mismo ancho de columnas, el widget de tabla es el enfoque correcto. SliverList o Column serán las más adecuadas si solo queremos tener una sola columna. La altura de las filas en el widget Tabel depende del contenido dentro de ellas. Pero el ancho de la columna se puede cambiar especificando la propiedad columnWidths.",
    "tipDismissible": "Un widget que se puede descartar arrastrando en la dirección indicada. Arrastrar o lanzar este widget en DismissDirection hace que el niño se deslice fuera de la vista. Siguiendo la animación de la diapositiva, si resizeDuration no es nulo, el widget Dismissible anima su alto (o ancho, lo que sea perpendicular a la dirección de descarte) a cero sobre resizeDuration.",
    "tipSnackBar": "Un mensaje ligero con una acción opcional que se muestra brevemente en la parte inferior de la pantalla.",
    "tipGridView": "Flutter GridView es un widget que es similar a una matriz 2-D en cualquier lenguaje de programación. Como sugiere el nombre, se usa un widget GridView cuando tenemos que mostrar algo en una cuadrícula. Podemos mostrar imágenes, texto, iconos, etc. en GridView.",
    "tipSilverAppBar": "SliverAppBar es un widget de Material Design en flutter que ofrece una barra de aplicaciones desplazable o plegable. La palabra Astilla se da aquí a las áreas desplazables. SliverAppBar básicamente nos da los medios para crear una barra de aplicaciones que puede cambiar de apariencia, mezclarse con el fondo o incluso desaparecer a medida que nos desplazamos. Ya teníamos el widget AppBar en flutter que coloca la barra de la aplicación a una altura fija. Pero, mirando a nuestro alrededor, podemos ver que la interfaz de usuario de la barra de aplicaciones desplazable se usa ampliamente. Podemos que incluso la aplicación GeeksforGeeks use la barra de aplicaciones que es plegable. Para lograr la misma funcionalidad, flutter nos brinda el widget SliverAppBar, que generalmente se toma como un widget secundario de CustomScrollView (widget flutter), que le proporcionó el poder de interactuar con scroll.",
    "tipSilverGrid": "Una astilla que coloca a varios niños de caja en una disposición bidimensional. SliverGrid coloca a sus hijos en posiciones arbitrarias determinadas por gridDelegate. Cada niño está obligado a tener el tamaño especificado por gridDelegate. La dirección del eje principal de una cuadrícula es la dirección en la que se desplaza; la dirección del eje transversal es la dirección ortogonal.",
    "tipNavigator": "Navegador: como su nombre indica, Navigator es un widget que nos ayuda a navegar entre las rutas. El navegador sigue el método de pila cuando se trata de las rutas. En función de las acciones realizadas por el usuario, las rutas se apilan una sobre otra y cuando se presiona hacia atrás, se dirige a la ruta visitada más recientemente. Navigator es un widget que sigue una disciplina de pila.",
    "tipDialog": "El diálogo es un tipo de widget que aparece en la ventana o la pantalla que contiene cualquier información crítica o puede solicitar cualquier decisión. Cuando aparece un cuadro de diálogo, todas las demás funciones se desactivan hasta que cierra el cuadro de diálogo o proporciona una respuesta. Usamos un cuadro de diálogo para un tipo diferente de condición como notificación de alerta, notificación simple en la que se muestran diferentes opciones, o también podemos hacer un cuadro de diálogo que se puede usar como pestaña para mostrar el cuadro de diálogo.",
    "tipSendData": "A menudo, no solo desea navegar a una nueva pantalla, sino que también desea pasar datos a la pantalla. Por ejemplo, es posible que desee pasar información sobre el elemento que se ha tocado. Recuerde: las pantallas son solo widgets.",
    "tipListView": "En Flutter, ListView es una lista desplazable de widgets organizados linealmente. Muestra sus hijos uno tras otro en la dirección de desplazamiento, es decir, vertical u horizontal.",
    "tipPopupMenuButton": "Muestra un menú cuando se presiona y llama a Seleccionado cuando el menú se cierra porque se seleccionó un elemento. El valor pasado a onSelected es el valor del elemento de menú seleccionado. Se puede proporcionar uno de niño o icono, pero no ambos. Si se proporciona el icono, entonces PopupMenuButton se comporta como un IconButton.",
    "tipRefreshIndicator": "Un widget que admite el idioma 'deslizar para actualizar' del material. Cuando el descendiente desplazable del niño se desplaza demasiado, aparece un indicador de progreso circular animado. Cuando finaliza el desplazamiento, si el indicador se ha arrastrado lo suficiente como para que se vuelva completamente opaco, se llama a la devolución de llamada onRefresh. Se espera que la devolución de llamada actualice el contenido del desplazable y luego complete el futuro que devuelve. El indicador de actualización desaparece después de que se completa el futuro de la devolución de llamada.",
    "tipClipRect": "El widget ClipRect se usa para recortar a su hijo usando un rectángulo. Se asocia con la familia Clippers. El uso principal de los clippers es recortar cualquier parte del widget según sea necesario. Se comporta de forma similar a ClipRRect y se utiliza para recortar una parte Rectangle del widget secundario pero sin las esquinas redondeadas.",
    "tipClipRRect": "El widget ClipRRect en flutter se usa para recortar a su hijo usando un rectángulo redondeado. Se asocia con la familia Clippers. El uso principal de los clippers es recortar cualquier parte del widget según sea necesario. Se comporta de forma similar a ClipRect y se utiliza para recortar una parte Rectangle del widget secundario pero con esquinas redondeadas.",
    "tipClipOval": "El widget ClipOval recorta el widget secundario en forma de óvalo o círculo. Podemos remodelar el widget secundario cambiando el ancho y el alto. Si el ancho y el alto son iguales, la forma será circular. Si el ancho y el alto se dan de manera diferente, la forma será ovalada.",
    "tipClipPath": "Un widget que recorta a su hijo usando una ruta. Llama a una devolución de llamada a un delegado cada vez que se va a pintar el widget. La devolución de llamada devuelve una ruta y el widget evita que el niño pinte fuera de la ruta.",
    "tipFlexible": "Flexible es un widget integrado en Flutter que controla cómo un hijo de los widgets básicos de flex que son Row, Column y Flex llenará el espacio disponible. El widget expandido en flutter es una abreviatura de Flexible con el ajuste predeterminado de FlexFit.tight. El widget flexible juega un papel muy importante en la creación de una aplicación receptiva que se ve y se siente igual en múltiples tamaños de dispositivos. Pero si uno solo quiere el llenado básico de espacios con widgets, Expanded también es un buen candidato para eso.",
    "tipExpanded": "El widget expandido en flutter es útil cuando queremos que un widget secundario o widgets secundarios ocupen todo el espacio disponible a lo largo del eje principal (para Row, el eje principal es horizontal y vertical para Column). El widget expandido se puede tomar como hijo de Row, Column y Flex. Y en caso de que no queramos dar espacios iguales a los widgets de nuestros hijos, podemos distribuir el espacio disponible a nuestro antojo usando el factor de flexibilidad. El widget expandido es similar al widget flexible en flutter, con su propiedad de ajuste establecida en FlexFit.tight de forma predeterminada. El widget expandido es básicamente una abreviatura de widget flexible. Pero si planea crear aplicaciones web o aplicaciones receptivas, definitivamente debería cambiar a Flexible para obtener más opciones de ajuste.",
    "tipCircleAvatar": "El widget CircleAvatar viene integrado con el SDK de flutter. Es simplemente un círculo en el que podemos agregar color de fondo, imagen de fondo o simplemente algo de texto. Suele representar a un usuario con su imagen o con sus iniciales. Aunque podemos hacer un widget similar desde cero, este widget es útil para el rápido desarrollo de una aplicación.",
    "tipFittedBox": "FittedBox es un widget muy útil que escala y posiciona a su hijo dentro de sí mismo de acuerdo con el ajuste y la alineación. Considere una aplicación, en la cual, debe recibir información del usuario y, en un determinado escenario, el usuario ingresa una entrada grande que desborda y dispersa otros widgets. Como muchos de los widgets son dinámicos, lo que significa que pueden crecer y reducir su tamaño, de acuerdo con el tamaño de su widget secundario. Entonces, en este caso, la interfaz de usuario no sería adaptable. Para superar este problema, podemos utilizar el widget FittedBox. FittedBox impide que sus widgets secundarios aumenten su tamaño más allá de un cierto límite. Los vuelve a escalar según el tamaño disponible. Por ejemplo, si el texto se muestra dentro de un contenedor y el usuario debe ingresar el texto. Si el usuario ingresa una cadena de texto grande, el contenedor crecerá más allá de su tamaño asignado. Pero, si lo envolvemos con FittedBox, entonces se ajustará al texto de acuerdo con el tamaño disponible. Para una cuerda grande, reduciría su tamaño y, por lo tanto, cabría en el contenedor.",
    "tipVisibility": "Ya sea para mostrar u ocultar a un niño. De forma predeterminada, la propiedad visible controla si el niño está incluido en el subárbol o no; cuando no está visible, se incluye el elemento secundario de reemplazo (normalmente una caja de tamaño cero). Se puede usar una variedad de banderas para ajustar exactamente cómo se oculta el niño. (Se desaconseja cambiar las banderas dinámicamente, ya que puede hacer que el subárbol secundario se reconstruya, descartando cualquier estado en el subárbol. Por lo general, solo la bandera visible se cambia dinámicamente).",
    "tipBoxDecoration": "BoxDecoration es un widget integrado en la API de flutter. En un nivel básico, describe cómo se debe pintar una caja en la pantalla. La forma de la caja no necesita ser solo un rectángulo o un cuadrado, también puede circular. Viene con un montón de propiedades, podemos agregar una imagen en el interior, agregar un radio al borde (si la forma es un rectángulo), proyectar sombras en el cuadro, etc.",
    "tipSelectableText": "Una serie de texto seleccionable con un solo estilo. El widget SelectableText muestra una cadena de texto con un solo estilo. La cadena puede dividirse en varias líneas o puede que todas se muestren en la misma línea, dependiendo de las restricciones de diseño.",
    "tipInteractiveViewer": "Un widget que permite las interacciones de panorámica y zoom con su hijo.",
    "tipSlider": "Un control deslizante de Material Design. Se utiliza para seleccionar entre un rango de valores.",
    "tipChip": "Un chip de diseño de materiales. Los chips son elementos compactos que representan un atributo, texto, entidad o acción. Proporcionar una devolución de llamada onDeleted no nula hará que el chip incluya un botón para eliminar el chip.",
    "tipAspectRatio": "Un widget que intenta ajustar el tamaño del niño a una relación de aspecto específica. El widget primero prueba el ancho más grande permitido por las restricciones de diseño. La altura del widget se determina aplicando la relación de aspecto dada al ancho, expresada como una relación de ancho a alto.",
    "tipPlaceholder": "Un widget que dibuja un cuadro que representa dónde se agregarán otros widgets algún día. Este widget es útil durante el desarrollo para indicar que la interfaz aún no está completa.",
    "tipSpacer": "El espaciador crea un espaciador vacío ajustable que se puede usar para ajustar el espacio entre los widgets en un contenedor Flex, como Fila o Columna. El widget Spacer ocupará cualquier espacio disponible, por lo que configurar Flex.mainAxisAlignment en un contenedor flexible que contiene un Spacer en MainAxisAlignment.spaceAround, MainAxisAlignment.spaceBetween o MainAxisAlignment.spaceEvenly no tendrá ningún efecto visible: el Spacer ha ocupado todo del espacio adicional, por lo tanto, no queda nada para redistribuir.",
    "tipListWheelScrollView": "ListWheelScrollView es un widget de aleteo que se usa para construir ListView con efecto 3D. También podemos usar ListView para crear una lista de elementos, pero no podemos agregarle un efecto 3D y además viene con una restricción de que todos los niños dentro de este widget deben ser del mismo tamaño a lo largo del eje de paseo. ListWheelScrollView de Flutter agrega sus elementos secundarios en una rueda desplazable. Eso da como resultado un efecto 3D como si los niños estuvieran girando en una rueda. Este widget viene con muchas propiedades. Algunos nos permiten fijar el diámetro de la rueda, hacer un offset o incluso añadir un efecto de aumento.",
    "tipImageLoadingBuilder": "Un constructor que especifica el widget que se mostrará al usuario mientras aún se está cargando una imagen. Si esto es nulo y la imagen se carga de forma incremental (por ejemplo, a través de una red), el usuario no recibirá ninguna indicación del progreso a medida que se cargan los bytes de la imagen.",
    "tipMouseRegion": "Un widget que rastrea el movimiento de los ratones. MouseRegion se utiliza cuando es necesario comparar la lista de objetos sobre los que se desplaza el puntero del mouse entre este fotograma y el último fotograma. Esto significa ingresar eventos, salir de eventos y cursores del mouse.",
    "tipOpacity": "El widget Opacity que hace que su hijo sea parcialmente transparente. Esta clase colorea a su hijo en un búfer intermedio y luego lo fusiona de nuevo con la escena parcialmente transparente. Para valores de opacidad distintos de 0.0 y 1.0, esta clase es relativamente cara ya que necesita colorear al niño en un búfer intermedio. Para el valor 0.0, el niño simplemente no tiene ningún color. Para el valor 1.0, el niño se colorea sin un búfer intermedio.",
    "tipConstrainedBox": "Un widget que impone restricciones adicionales a su hijo. Por ejemplo, si desea que el niño tenga una altura mínima de 50.0 píxeles lógicos, puede usar const BoxConstraints (minHeight: 50.0) como restricciones.",
    "tipAlign": "Align Widget es el widget que se utiliza para alinear a su hijo dentro de sí mismo y, opcionalmente, se ajusta a sí mismo en función del tamaño del niño. Align Widget es bastante flexible y puede cambiar su tamaño según el tamaño de su hijo.",
    "tipLayoutBuilder": "Crea un árbol de widgets que puede depender del tamaño del widget principal. Similar al widget Builder, excepto que el marco llama a la función del constructor en el momento del diseño y proporciona las restricciones del widget padre. Esto es útil cuando el padre restringe el tamaño del niño y no depende del tamaño intrínseco del niño. El tamaño final del LayoutBuilder coincidirá con el tamaño de su hijo.",
    "tipPadding": "El widget de relleno en Flutter hace exactamente lo que dice su nombre, agrega relleno o espacio vacío alrededor de un widget o un montón de widgets. Podemos aplicar relleno alrededor de cualquier widget colocándolo como hijo del widget de relleno. El tamaño del widget secundario dentro del relleno está limitado por la cantidad de espacio que queda después de agregar un espacio vacío alrededor. El widget de relleno agrega espacio vacío alrededor de cualquier widget utilizando la clase abstracta EdgeInsetsGeometry.",
    "tipAbsorbPointer": "AbsorbPointer es un widget integrado en Flutter que absorbe el puntero, en otras palabras, evita que se haga clic, toque, desplazamiento, arrastre, arrastre y respuesta al subárbol de su subárbol. En flutter, la mayoría de los widgets ya vienen con una opción para deshabilitarlos, por ejemplo, en un RaisedButton podemos establecer la función onClicked en nulo para deshabilitar, o podemos usar NeverScrollableScrollPhysics () para deshabilitar un ListView. Pero si queremos deshabilitar todo un árbol de widgets o incluso una pantalla completa a la vez, podemos hacerlo con la ayuda del widget AbsorbPointer. IgnorePointer es también un widget similar en flutter, que también evita que se haga clic en sus hijos.",
    "tipIgnorePointer": "IgnorePointer es un widget integrado en Flutter que es similar al widget AbsorbPointer, ambos evitan que el widget de sus hijos tenga eventos de puntero que se graban, hacen clic, arrastran, se desplazan y flotan. Ambos hacen lo mismo de dos formas diferentes, el widget AbsorbPointer absorbe todos los eventos de puntero, lo que significa que los eventos de punteros se terminan por completo y no se pueden pasar a ningún otro lugar. Por otro lado, el widget IgnorePointer simplemente ignora los eventos de puntero sin terminarlo, lo que significa que si hay algún otro elemento debajo del árbol del widget IgnorePointer, entonces podrá experimentar ese evento de puntero.",
    "tipTooltip": "La información sobre herramientas es un widget integrado en Flutter basado en el diseño de materiales, que muestra una descripción textual del widget en una etiqueta flotante cuando un usuario mantiene presionado o se desplaza sobre el widget. El widget de información sobre herramientas se vuelve muy útil cuando la interfaz de usuario de la aplicación es demasiado densa para mostrar toda la información a la vez en la pantalla, de una manera que simplemente hace que la aplicación sea más accesible. Hay dos formas de implementar la información sobre herramientas en un widget, la primera es mediante el uso del propio widget y la otra se limita a algunos widgets como IconButton, FloatingActionButton, etc.que proporcionan información sobre herramientas como una propiedad que a su vez incluye una cadena como parámetro. Se debe recordar que el widget de información sobre herramientas se puede personalizar a través de sus propiedades, pero la propiedad de información sobre herramientas no lo es.",
    "tipFlutterLogo": "El widget FlutterLogo es tan simple como parece, es solo el logotipo de flutter en forma de icono. Este widget también viene integrado con el SDK de flutter. Este widget puede encontrar su uso como marcador de posición para una imagen o icono.",
    "tipSizedBox": "SizedBox es un widget integrado en el SDK de flutter. Es una caja simple con un tamaño específico. Se puede usar para establecer restricciones de tamaño para el widget secundario, colocar un SizedBox vacío entre los dos widgets para obtener algo de espacio entre ellos, o algo más. Es algo similar a un widget de contenedor con menos propiedades.",
    "tipFloatingActionButton": "Un botón de acción flotante es un botón de icono circular que se desplaza sobre el contenido para promover una acción principal en la aplicación. Los botones de acción flotantes se utilizan con mayor frecuencia en el campo Scaffold.floatingActionButton.",
    "tipCheckbox": "La casilla de verificación en Flutter es un widget de diseño de materiales. Siempre se utiliza en el widget con estado, ya que no mantiene un estado propio. Podemos usar su propiedad onChanged para interactuar o modificar otros widgets en la aplicación flutter. Como la mayoría de los otros widgets de flutter, también viene con muchas propiedades como activeColor, checkColor, mouseCursor, etc., para permitir que los desarrolladores tengan un control total sobre la apariencia del widget.",
    "tipEndDrawer": "EndDrawer es el panel que se muestra al costado del cuerpo (Scaffold Widget). Generalmente está oculto en dispositivos móviles. Podemos abrirlo deslizando el dedo de derecha a izquierda, o podemos personalizarlo para que se abra al presionar un icono o un botón. Este widget es similar al widget Drawer ya presente en Flutter, excepto por el hecho de que Drawer se abre por defecto de izquierda a derecha y endDrawer por defecto se abre de derecha a izquierda. Sin embargo, esta dirección se puede cambiar mediante la propiedad textDirection.",
    "tipBanner": "El widget de banner viene integrado con la API de flutter. Es algo similar al banner de depuración a lo que estamos acostumbrados a ver en la esquina superior derecha de una aplicación de flutter en modo de depuración. Nos permite mostrar un mensaje o texto encima de cualquier otro widget.",
    "tipBorderRadius": "BorderRadius es un widget integrado en Flutter. Su principal funcionalidad es agregar una curva alrededor de la esquina del borde de un widget. Hay un total de cinco formas en las que podemos usar este widget, la primera es usando BorderRadius.all, el radio de todas las esquinas es el mismo aquí. La segunda forma es usando BorderRadius.Circle, aquí necesitamos especificar el radio solo una vez, lo que sería un valor doble. La tercera forma es usando BorderRadius.horizontal, aquí podemos especificar diferentes radios de borde para el lado izquierdo y el derecho. La cuarta forma es usando BorderRadius. Solo, puede tomar un radio diferente para las cuatro esquinas del borde. Y la última forma es usando BorderRadius.vertical, que puede dar un radio diferente a la parte superior e inferior del borde.",
    "tipSingleChildScrollView": "Un cuadro en el que se puede desplazar un solo widget. Este widget es útil cuando tiene un solo cuadro que normalmente será completamente visible, por ejemplo, una esfera de reloj en un selector de tiempo, pero debe asegurarse de que se pueda desplazar si el contenedor se vuelve demasiado pequeño en un eje (la dirección de desplazamiento ).",
    "tipBoxShadow": "BoxShadow es un widget integrado en Flutter, cuya funcionalidad es proyectar sombras en un cuadro. El widget BoxShadow se usa generalmente con BoxDecoration. En el widget BoxDecoration, uno de sus parámetros es boxShadow, que toma una lista de BoxShadow para proyectar una sombra alrededor de una caja.",
    "tipBottomNavigationBar": "El widget BottonNavigationBar se utiliza para mostrar la parte inferior de una aplicación. Puede constar de varios elementos, como iconos, texto o ambos, que conducen a una ruta diferente según el diseño de la aplicación. Está destinado a ayudar al usuario a navegar a diferentes secciones de la aplicación en general.",
    "tipExpansionPanel": "Cuando queremos expandir y contraer cosas, podemos hacerlo con la ayuda de un panel de expansión. Esta lista del panel de expansión se utiliza principalmente en las aplicaciones y proporciona funciones adicionales a la aplicación. Podemos crear una lista de niños y envolverla con una Lista de panel de expansión. También podemos crear más de un panel de expansión en nuestra aplicación. Podemos controlar si el panel está abierto o no mediante la propiedad isExpanded.",
    "tipPaint": "Una descripción del estilo que se utilizará al dibujar en un lienzo. La mayoría de las API en Canvas toman un objeto Paint para describir el estilo que se utilizará para esa operación.",
    "tipClipboard": "Métodos de utilidad para interactuar con el portapapeles del sistema.",
    "tipPageRouteBuilder": "Las rutas son simplemente páginas en aplicaciones de Flutter. A menudo, una aplicación necesita moverse de una página a otra. Pero para hacer que esta transición sea más suave, se pueden usar animaciones. Estas animaciones se pueden utilizar para curvar o interpolar el objeto Animation de la clase PageRouteBuilder para alterar la animación de transición.",
    "tipShaderMask": "Un widget que aplica una máscara generada por un Shader a su hijo.",
    "tipAnimatedContainer": "En Flutter, un contenedor es un widget simple con propiedades bien definidas como altura, ancho y color, etc. El widget AnimatedContainer es un widget contenedor simple con animaciones. Estos tipos de widgets se pueden animar modificando los valores de sus propiedades, que son las mismas que las del widget Container. Este tipo de animación en Flutter se conoce como 'Animación implícita'. Luego, discutiremos en detalle en este artículo creando una aplicación simple con el widget AnimatedContainer.",
    "tipAnimatedCrossFade": "Un widget que se desvanece entre dos elementos secundarios determinados y se anima a sí mismo entre sus tamaños.",
    "tipAnimatedOpacity": "Versión animada de Opacity que cambia automáticamente la opacidad del niño durante una duración determinada cada vez que cambia la opacidad dada.",
    "tipAnimatedDefaultTextStyle": "Versión animada de DefaultTextStyle que cambia automáticamente el estilo de texto predeterminado (el estilo de texto que se aplica a los widgets de texto descendientes sin un estilo explícito) durante una duración determinada cada vez que cambia el estilo dado.",
    "tipCustomPaint": "La interfaz utilizada por CustomPaint (en la biblioteca de widgets) y RenderCustomPaint (en la biblioteca de renderizado). Para implementar un pintor personalizado, realice una subclase o implemente esta interfaz para definir su delegado de pintura personalizado. Las subclases CustomPaint deben implementar los métodos paint y shouldRepaint, y opcionalmente también pueden implementar los métodos hitTest y shouldRebuildSemantics, y el getter semanticsBuilder.",
    "tipTransform": "Un widget que aplica una transformación antes de pintar su hijo. A diferencia de RotatedBox, que aplica una rotación antes del diseño, este objeto aplica su transformación justo antes de pintar, lo que significa que la transformación no se tiene en cuenta al calcular cuánto espacio consume el hijo de este widget (y, por lo tanto, este widget).",
    "tipDraggableScrollableSheet": "Un contenedor para un Scrollable que responde a los gestos de arrastre cambiando el tamaño del scrollable hasta que se alcanza un límite y luego desplazándolo.",
    "tipIndexedStack": "Una pila que muestra un solo niño de una lista de niños. El niño mostrado es el que tiene el índice dado. La pila siempre es tan grande como el niño más grande.",
    "tipColorFiltered": "Aplica un ColorFilter a su hijo. Este widget aplica una función de forma independiente a cada píxel del contenido del niño, de acuerdo con el ColorFilter especificado. Use el constructor ColorFilter.mode para aplicar un Color usando un BlendMode. Use el widget BackdropFilter en su lugar, si el ColorFilter necesita aplicarse al contenido debajo del niño.",
    "tipDataTable": "El widget DataTable te permite crear una tabla que ajusta automáticamente el tamaño de sus columnas de acuerdo con lo que hay realmente en las celdas.",
    "tipFadeInImage": "Una imagen que muestra una imagen de marcador de posición mientras se carga la imagen de destino, luego se desvanece en la nueva imagen cuando se carga. Utilice esta clase para mostrar imágenes de carga prolongada, como new NetworkImage, de modo que la imagen aparezca en la pantalla con una animación elegante en lugar de aparecer abruptamente en la pantalla.",
    "tipFadeTransition": "Anima la opacidad de un widget.",
    "tipImageFiltered": "Flutter proporciona un ImageFiltered, una clase de bajo nivel que toma píxeles y los reorganiza. Aplica un ImageFilter a su hijo. Una operación de filtro para aplicar a una imagen ráster. ImageFiltered desenfocará las imágenes, el texto y cualquier cosa será borrosa. También funciona en cualquier matriz para la transformación como escalar, traducir, sesgar, rotar, etc.",
    "tipPositioned": "Un widget que controla dónde se coloca un hijo de una pila. Un widget posicionado debe ser un descendiente de una pila, y la ruta desde el widget posicionado hasta su pila adjunta debe contener solo StatelessWidgets o StatefulWidgets (no otros tipos de widgets, como RenderObjectWidgets).",
    "tipLinearProgressIndicator": "Un LinearProgressIndicator también conocido como barra de progreso es un widget que muestra el progreso en una dirección lineal o a lo largo de una línea para indicar que la aplicación está en progreso.",
    "tipLimitedBox": "Una caja que limita su tamaño solo cuando no está restringida. Si el ancho máximo de este widget no está restringido, el ancho de su hijo está limitado a maxWidth. Del mismo modo, si la altura máxima de este widget no está restringida, la altura de su hijo está limitada a maxHeight.",
    "tipAnimatedSwitcher": "Un widget que de forma predeterminada hace un fundido cruzado entre un nuevo widget y el widget configurado previamente en AnimatedSwitcher como hijo.",
    "tipCheckboxListTile": "CheckboxListTile es un widget integrado en Flutter. Podemos decir que es una combinación de CheckBox con ListTile. Sus propiedades como value, activeColor y checkColor son similares al widget CheckBox, y el título, subtítulo, contentPadding, etc.son similares al widget ListTile. Podemos tocar en cualquier lugar de CheckBoxListTile para activar la casilla de verificación.",
    "tipSwitchListTile": "Un ListTile con un interruptor. En otras palabras, un interruptor con una etiqueta.",
    "tipExpansionPanelList": "Una lista de paneles de expansión de material que presenta sus elementos secundarios y anima las expansiones.",
    "tipFractionallySizedBox": "Un widget que dimensiona su hijo a una fracción del espacio total disponible.",
    "tipScrollbar": "Las barras de desplazamiento son interactivas y también usarán PrimaryScrollController si no se configura un controlador. Los pulgares de la barra de desplazamiento se pueden arrastrar a lo largo del eje principal de ScrollView para cambiar ScrollPosition. Al tocar a lo largo de la pista sin el pulgar, se activará una página ScrollIncrementType.page basada en la posición relativa del pulgar.",
    "tipOverflowBox": "Un widget que impone diferentes restricciones a su hijo que las que recibe de su padre, posiblemente permitiendo que el hijo desborde al padre.",
    "tipRadioListTile": "ListTile con radio. En otras palabras, un botón de radio con una etiqueta. Todo el mosaico de la lista es interactivo: al tocar en cualquier lugar del mosaico, se selecciona el botón de opción.",
    "tipTextField": "TextField y TextFormField son los dos widgets más comunes para obtener información del usuario. Se pueden utilizar para crear formularios, páginas de inicio de sesión, etc.",
    "tipScrollController": "Controla un widget desplazable. Los controladores de desplazamiento se almacenan normalmente como variables miembro en los objetos State y se reutilizan en cada State.build. Se puede usar un solo controlador de desplazamiento para controlar múltiples widgets desplazables, pero algunas operaciones, como leer el desplazamiento de desplazamiento, requieren que el controlador se use con un único widget desplazable."
}